{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cliente\\\\Desktop\\\\ESTUDOS\\\\REACT\\\\PROJETOS\\\\Netflix\\\\netflix\\\\src\\\\components\\\\InputForm\\\\index.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function InputForm(_ref) {\n  let {\n    type,\n    name,\n    placeholder,\n    value,\n    onChange,\n    pattern\n  } = _ref;\n  const errorTypes = ['valueMissing', 'typeMismatch', 'patternMismatch', 'customError'];\n  const errorMessages = {\n    name: {\n      valueMissing: 'O campo de nome não está preenchido.'\n    },\n    password: {\n      valueMissing: 'O campo de senha não está preenchido.',\n      patternMismatch: 'A senha deve conter entre 6 e 12 caracteres, sendo pelo menos uma letra minúscula, uma maiúscula, um número e não deve conter símbolos.'\n    },\n    email: {\n      valueMissing: 'O campo de email não está preenchido.',\n      typeMismatch: 'O formato de email digitado não é válido.'\n    }\n  };\n  const input = document.querySelector('.inputForm__item');\n\n  if (input.validity.valid) {\n    input.parentElement.classList.remove('error');\n  } else {\n    input.parentElement.classList.add('error');\n  }\n\n  function showErrorMessage(tipoDeInput, input) {\n    let message = '';\n    errorTypes.forEach(erro => {\n      if (input.validity[erro]) {\n        message = errorMessages[tipoDeInput][erro];\n      }\n    });\n    return message;\n  }\n\n  function inputValidate(input) {\n    const inputType = input.dataset.type;\n\n    if (input.validity.valid) {\n      input.parentElement.classList.remove('error');\n      input.parentElement.querySelector('.inputForm_error').innerHTML = '';\n    } else {\n      input.parentElement.classList.add('error');\n      input.parentElement.querySelector('.inputForm_error').innerHTML = showErrorMessage(input);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"inputForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputForm__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: type,\n        className: \"inputForm__item\",\n        name: name,\n        placeholder: placeholder,\n        value: value,\n        onChange: onChange,\n        pattern: pattern,\n        required: true,\n        \"data-type\": name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: name,\n        className: \"inputForm__label\",\n        children: placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"inputForm__error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_c = InputForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputForm\");","map":{"version":3,"sources":["C:/Users/Cliente/Desktop/ESTUDOS/REACT/PROJETOS/Netflix/netflix/src/components/InputForm/index.js"],"names":["React","InputForm","type","name","placeholder","value","onChange","pattern","errorTypes","errorMessages","valueMissing","password","patternMismatch","email","typeMismatch","input","document","querySelector","validity","valid","parentElement","classList","remove","add","showErrorMessage","tipoDeInput","message","forEach","erro","inputValidate","inputType","dataset","innerHTML"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nexport default function InputForm({type, name, placeholder, value, onChange, pattern}) {\r\n\r\n  const errorTypes = [\r\n    'valueMissing',\r\n    'typeMismatch',\r\n    'patternMismatch',\r\n    'customError'\r\n  ]\r\n\r\n  const errorMessages = {\r\n    name: {\r\n      valueMissing: 'O campo de nome não está preenchido.'\r\n    },\r\n    password: {\r\n      valueMissing: 'O campo de senha não está preenchido.',\r\n      patternMismatch: 'A senha deve conter entre 6 e 12 caracteres, sendo pelo menos uma letra minúscula, uma maiúscula, um número e não deve conter símbolos.'\r\n    },\r\n    email: {\r\n      valueMissing: 'O campo de email não está preenchido.',\r\n      typeMismatch: 'O formato de email digitado não é válido.'\r\n    }\r\n  }\r\n\r\n  const input = document.querySelector('.inputForm__item');\r\n\r\n  if(input.validity.valid) {\r\n    input.parentElement.classList.remove('error')\r\n  } else {\r\n    input.parentElement.classList.add('error')\r\n  }\r\n\r\n  function showErrorMessage(tipoDeInput, input){\r\n    let message = '';\r\n    errorTypes.forEach((erro) => {\r\n      if(input.validity[erro]){\r\n        message = errorMessages[tipoDeInput][erro]\r\n      }\r\n    })\r\n    return message;\r\n  }\r\n\r\n  function inputValidate(input){\r\n    const inputType = input.dataset.type;\r\n\r\n    if(input.validity.valid){\r\n      input.parentElement.classList.remove('error')\r\n      input.parentElement.querySelector('.inputForm_error').innerHTML = ''\r\n    } else {\r\n      input.parentElement.classList.add('error')\r\n      input.parentElement.querySelector('.inputForm_error').innerHTML = showErrorMessage(input)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"inputForm\">\r\n      <div className=\"inputForm__container\">\r\n        <input type={type} className=\"inputForm__item\" name={name} placeholder={placeholder}\r\n          value={value}\r\n          onChange={onChange}\r\n          pattern={pattern}\r\n          required\r\n          data-type={name}\r\n          />\r\n        <label htmlFor={name} className=\"inputForm__label\">{placeholder}</label>\r\n        </div>\r\n      <span className=\"inputForm__error\"></span>\r\n    </div>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}