{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cliente\\\\Desktop\\\\ESTUDOS\\\\REACT\\\\PROJETOS\\\\Netflix\\\\netflix\\\\src\\\\components\\\\InputForm\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function InputForm(_ref) {\n  _s();\n\n  let {\n    type,\n    name,\n    placeholder,\n    value,\n    onChange,\n    pattern\n  } = _ref;\n  const [errorMessage, setErrorMessage] = useState('');\n  const errorTypes = ['valueMissing', 'typeMismatch', 'patternMismatch', 'customError'];\n  const errorMessages = {\n    name: {\n      valueMissing: 'O campo de nome não está preenchido.'\n    },\n    password: {\n      valueMissing: 'A senha deve ser informada.',\n      patternMismatch: 'A senha deve conter entre 6 e 12 caracteres, sendo pelo menos uma letra minúscula, uma maiúscula, um número e não deve conter símbolos.'\n    },\n    email: {\n      valueMissing: 'O campo de email não está preenchido.',\n      typeMismatch: 'O formato de email digitado não é válido.'\n    }\n  };\n\n  function showErrorMessage(tipoDeInput, input) {\n    let message = '';\n    errorTypes.forEach(erro => {\n      if (input.validity[erro]) {\n        message = errorMessages[tipoDeInput][erro];\n      }\n    });\n    return message;\n  }\n\n  function inputValidate(e) {\n    const input = e.target;\n    const inputType = input.dataset.type;\n\n    if (input.validity.valid) {\n      input.parentElement.classList.remove('error');\n      setErrorMessage('');\n    } else {\n      input.parentElement.classList.add('error');\n      setErrorMessage(showErrorMessage(inputType, input));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"inputForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputForm__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: type,\n        className: \"inputForm__item\",\n        name: name,\n        placeholder: placeholder,\n        value: value,\n        pattern: pattern,\n        \"data-type\": name,\n        onChange: onChange,\n        onBlur: e => inputValidate(e),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: name,\n        className: \"inputForm__label\",\n        children: placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"inputForm__error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InputForm, \"Qa+fXmSUSiSzKMj9v3Zv5vD0nos=\");\n\n_c = InputForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputForm\");","map":{"version":3,"sources":["C:/Users/Cliente/Desktop/ESTUDOS/REACT/PROJETOS/Netflix/netflix/src/components/InputForm/index.js"],"names":["React","useState","InputForm","type","name","placeholder","value","onChange","pattern","errorMessage","setErrorMessage","errorTypes","errorMessages","valueMissing","password","patternMismatch","email","typeMismatch","showErrorMessage","tipoDeInput","input","message","forEach","erro","validity","inputValidate","e","target","inputType","dataset","valid","parentElement","classList","remove","add"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,eAAe,SAASC,SAAT,OAA0E;AAAA;;AAAA,MAAvD;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,WAAd;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA,QAAlC;AAA4CC,IAAAA;AAA5C,GAAuD;AAEvF,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAMU,UAAU,GAAG,CACjB,cADiB,EAEjB,cAFiB,EAGjB,iBAHiB,EAIjB,aAJiB,CAAnB;AAOA,QAAMC,aAAa,GAAG;AACpBR,IAAAA,IAAI,EAAE;AACJS,MAAAA,YAAY,EAAE;AADV,KADc;AAIpBC,IAAAA,QAAQ,EAAE;AACRD,MAAAA,YAAY,EAAE,6BADN;AAERE,MAAAA,eAAe,EAAE;AAFT,KAJU;AAQpBC,IAAAA,KAAK,EAAE;AACLH,MAAAA,YAAY,EAAE,uCADT;AAELI,MAAAA,YAAY,EAAE;AAFT;AARa,GAAtB;;AAcA,WAASC,gBAAT,CAA0BC,WAA1B,EAAuCC,KAAvC,EAA8C;AAC5C,QAAIC,OAAO,GAAG,EAAd;AACAV,IAAAA,UAAU,CAACW,OAAX,CAAoBC,IAAD,IAAU;AAC3B,UAAIH,KAAK,CAACI,QAAN,CAAeD,IAAf,CAAJ,EAA0B;AACxBF,QAAAA,OAAO,GAAGT,aAAa,CAACO,WAAD,CAAb,CAA2BI,IAA3B,CAAV;AACD;AACF,KAJD;AAKA,WAAOF,OAAP;AACD;;AAED,WAASI,aAAT,CAAuBC,CAAvB,EAA0B;AACxB,UAAMN,KAAK,GAAGM,CAAC,CAACC,MAAhB;AACA,UAAMC,SAAS,GAAGR,KAAK,CAACS,OAAN,CAAc1B,IAAhC;;AACA,QAAIiB,KAAK,CAACI,QAAN,CAAeM,KAAnB,EAA0B;AACxBV,MAAAA,KAAK,CAACW,aAAN,CAAoBC,SAApB,CAA8BC,MAA9B,CAAqC,OAArC;AACAvB,MAAAA,eAAe,CAAC,EAAD,CAAf;AACD,KAHD,MAGO;AACLU,MAAAA,KAAK,CAACW,aAAN,CAAoBC,SAApB,CAA8BE,GAA9B,CAAkC,OAAlC;AACAxB,MAAAA,eAAe,CAACQ,gBAAgB,CAACU,SAAD,EAAYR,KAAZ,CAAjB,CAAf;AACD;AACF;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,8BACE;AAAO,QAAA,IAAI,EAAEjB,IAAb;AAAmB,QAAA,SAAS,EAAC,iBAA7B;AAA+C,QAAA,IAAI,EAAEC,IAArD;AAA2D,QAAA,WAAW,EAAEC,WAAxE;AACE,QAAA,KAAK,EAAEC,KADT;AAEE,QAAA,OAAO,EAAEE,OAFX;AAGE,qBAAWJ,IAHb;AAIE,QAAA,QAAQ,EAAEG,QAJZ;AAKE,QAAA,MAAM,EAAGmB,CAAD,IAAOD,aAAa,CAACC,CAAD,CAL9B;AAME,QAAA,QAAQ;AANV;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AAAO,QAAA,OAAO,EAAEtB,IAAhB;AAAsB,QAAA,SAAS,EAAC,kBAAhC;AAAA,kBAAoDC;AAApD;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAYE;AAAM,MAAA,SAAS,EAAC,kBAAhB;AAAA,gBAAoCI;AAApC;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GA/DuBP,S;;KAAAA,S","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function InputForm({ type, name, placeholder, value, onChange, pattern }) {\r\n\r\n  const [errorMessage, setErrorMessage] = useState('')\r\n\r\n  const errorTypes = [\r\n    'valueMissing',\r\n    'typeMismatch',\r\n    'patternMismatch',\r\n    'customError'\r\n  ]\r\n\r\n  const errorMessages = {\r\n    name: {\r\n      valueMissing: 'O campo de nome não está preenchido.'\r\n    },\r\n    password: {\r\n      valueMissing: 'A senha deve ser informada.',\r\n      patternMismatch: 'A senha deve conter entre 6 e 12 caracteres, sendo pelo menos uma letra minúscula, uma maiúscula, um número e não deve conter símbolos.'\r\n    },\r\n    email: {\r\n      valueMissing: 'O campo de email não está preenchido.',\r\n      typeMismatch: 'O formato de email digitado não é válido.'\r\n    }\r\n  }\r\n\r\n  function showErrorMessage(tipoDeInput, input) {\r\n    let message = '';\r\n    errorTypes.forEach((erro) => {\r\n      if (input.validity[erro]) {\r\n        message = errorMessages[tipoDeInput][erro]\r\n      }\r\n    })\r\n    return message;\r\n  }\r\n\r\n  function inputValidate(e) {\r\n    const input = e.target\r\n    const inputType = input.dataset.type;\r\n    if (input.validity.valid) {\r\n      input.parentElement.classList.remove('error')\r\n      setErrorMessage('')\r\n    } else {\r\n      input.parentElement.classList.add('error')\r\n      setErrorMessage(showErrorMessage(inputType, input))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"inputForm\">\r\n      <div className=\"inputForm__container\">\r\n        <input type={type} className=\"inputForm__item\" name={name} placeholder={placeholder}\r\n          value={value}\r\n          pattern={pattern}\r\n          data-type={name}\r\n          onChange={onChange}\r\n          onBlur={(e) => inputValidate(e)}\r\n          required\r\n        />\r\n        <label htmlFor={name} className=\"inputForm__label\">{placeholder}</label>\r\n      </div>\r\n      <span className=\"inputForm__error\">{errorMessage}</span>\r\n    </div>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}