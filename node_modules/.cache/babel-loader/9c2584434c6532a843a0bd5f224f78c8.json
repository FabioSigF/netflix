{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cliente\\\\Desktop\\\\ESTUDOS\\\\REACT\\\\PROJETOS\\\\Netflix\\\\netflix\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Home from './layout/Home';\nimport MainHeader from \"./components/MainHeader\";\nimport MobileHeader from \"./components/MobileHeader\";\nimport Tmdb from \"./Tmdb.js\";\nimport './Styles/main.css';\nimport ManageProfile from \"./layout/ManageProfile\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  useEffect(() => {\n    function handleResize() {\n      setWindowWidth(window.innerWidth);\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  const [featureData, setFeatureData] = useState(null);\n  const [movieList, setMovieList] = useState([]);\n  useEffect(() => {\n    const loadAll = async () => {\n      // Pegando a lista Total\n      let list = await Tmdb.getHomeList();\n      setMovieList(list); //Pegando o feature\n\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeatureData(chosenInfo);\n    };\n\n    loadAll();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [windowWidth < 1200 ? /*#__PURE__*/_jsxDEV(MobileHeader, {\n      categorias: movieList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 30\n    }, this) : /*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 72\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(ManageProfile, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/home\",\n        element: /*#__PURE__*/_jsxDEV(Home, {\n          windowWidth: windowWidth,\n          movieList: movieList,\n          featureData: featureData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Iic1BSBKRuM/cO+QDH+iz+Seczc=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Cliente/Desktop/ESTUDOS/REACT/PROJETOS/Netflix/netflix/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Home","MainHeader","MobileHeader","Tmdb","ManageProfile","App","windowWidth","setWindowWidth","window","innerWidth","handleResize","addEventListener","removeEventListener","featureData","setFeatureData","movieList","setMovieList","loadAll","list","getHomeList","originals","filter","i","slug","randomChosen","Math","floor","random","items","results","length","chosen","chosenInfo","getMovieInfo","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAsD,kBAAtD;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAO,mBAAP;AACA,OAAOC,aAAP,MAA0B,wBAA1B;;AACA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAE5B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAACc,MAAM,CAACC,UAAR,CAA9C;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACd,aAASe,YAAT,GAAwB;AACtBH,MAAAA,cAAc,CAACC,MAAM,CAACC,UAAR,CAAd;AACD;;AACDD,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO,MAAMF,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACD,GANQ,EAMN,EANM,CAAT;AAQA,QAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACqB,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,OAAO,GAAG,YAAY;AAC1B;AACA,UAAIC,IAAI,GAAG,MAAMf,IAAI,CAACgB,WAAL,EAAjB;AACAH,MAAAA,YAAY,CAACE,IAAD,CAAZ,CAH0B,CAK1B;;AACA,UAAIE,SAAS,GAAGF,IAAI,CAACG,MAAL,CAAYC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,WAA5B,CAAhB;AACA,UAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBP,SAAS,CAAC,CAAD,CAAT,CAAaQ,KAAb,CAAmBC,OAAnB,CAA2BC,MAA3B,GAAoC,CAArD,CAAX,CAAnB;AACA,UAAIC,MAAM,GAAGX,SAAS,CAAC,CAAD,CAAT,CAAaQ,KAAb,CAAmBC,OAAnB,CAA2BL,YAA3B,CAAb;AACA,UAAIQ,UAAU,GAAG,MAAM7B,IAAI,CAAC8B,YAAL,CAAkBF,MAAM,CAACG,EAAzB,EAA6B,IAA7B,CAAvB;AACApB,MAAAA,cAAc,CAACkB,UAAD,CAAd;AACD,KAXD;;AAaAf,IAAAA,OAAO;AACR,GAfQ,EAeN,EAfM,CAAT;AAmBA,sBAEE,QAAC,MAAD;AAAA,eACIX,WAAW,GAAG,IAAd,gBAAqB,QAAC,YAAD;AAAc,MAAA,UAAU,EAAES;AAA1B;AAAA;AAAA;AAAA;AAAA,YAArB,gBAA+D,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADnE,eAEE,QAAC,MAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,OAAO,eAAE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,OAAO,eAAE,QAAC,IAAD;AACG,UAAA,WAAW,EAAET,WADhB;AAEG,UAAA,SAAS,EAAES,SAFd;AAGG,UAAA,WAAW,EAAEF;AAHhB;AAAA;AAAA;AAAA;AAAA;AAFX;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAkBD;;GApDuBR,G;;KAAAA,G","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport { BrowserRouter as Router, Routes, Route} from 'react-router-dom';\nimport Home from './layout/Home'\nimport MainHeader from \"./components/MainHeader\";\nimport MobileHeader from \"./components/MobileHeader\";\nimport Tmdb from \"./Tmdb.js\";\nimport './Styles/main.css'\nimport ManageProfile from \"./layout/ManageProfile\";\nexport default function App() {\n  \n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowWidth(window.innerWidth)\n    }\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const [featureData, setFeatureData] = useState(null);\n  const [movieList, setMovieList] = useState([]);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      // Pegando a lista Total\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      //Pegando o feature\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv')\n      setFeatureData(chosenInfo);\n    }\n\n    loadAll();\n  }, []);\n\n  \n\n  return (\n\n    <Router>\n      { windowWidth < 1200 ? <MobileHeader categorias={movieList} /> : <MainHeader />}\n      <Routes>\n        <Route path=\"/\" element={<ManageProfile/>} />\n        <Route \n          path=\"/home\" \n          element={<Home \n                      windowWidth={windowWidth} \n                      movieList={movieList} \n                      featureData={featureData}\n          />} \n        />\n      </Routes>\n        \n    </Router>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}