{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cliente\\\\Desktop\\\\ESTUDOS\\\\REACT\\\\PROJETOS\\\\Netflix\\\\netflix\\\\src\\\\App.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Tmdb from \"./Tmdb.js\";\nimport FeatureMovie from \"./components/FeatureMovie.js\";\nimport MovieRow from \"./components/MovieRow.js\";\nimport MainHeader from \"./components/MainHeader\";\nimport MobileHeader from \"./components/MobileHeader\";\nimport netflixLoading from '../src/imgs/netflix-loading.gif';\nimport \"./Styles/main.css\";\nimport { FaWindowMinimize } from \"react-icons/fa\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [movieList, setMovieList] = useState([]);\n  const [featureData, setFeatureData] = useState(null);\n  useEffect(() => {\n    const loadAll = async () => {\n      // Pegando a lista Total\n      let list = await Tmdb.getHomeList();\n      setMovieList(list); //Pegando o feature\n\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeatureData(chosenInfo);\n    };\n\n    loadAll();\n  }, []);\n\n  function getWindowWidth() {\n    _s();\n\n    const [windowWidth, setWindowWidth] = useState(0);\n    useEffect(() => {\n      function setWindowWidth() {}\n    });\n  }\n\n  _s(getWindowWidth, \"pbbkZhtjlGc4tSJD9AQY+caR7fc=\");\n\n  window.addEventListener('resize', setWindowWidth(window.innerWidth));\n  console.log(windowWidth);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [windowWidth < 1200 ? /*#__PURE__*/_jsxDEV(MobileHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 29\n    }, this) : /*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 47\n    }, this), featureData && /*#__PURE__*/_jsxDEV(FeatureMovie, {\n      item: featureData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"lists\",\n      children: movieList.map((item, key) => /*#__PURE__*/_jsxDEV(MovieRow, {\n        title: item.title,\n        items: item.items\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Feito com dedica\\xE7\\xE3o por F\\xE1bio Signorini\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Direitos de imagem para Netflix\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Dados utilizados do site Themoviedb.org\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), movieList.length <= 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: netflixLoading,\n        alt: \"Carregando..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"8qL0qSgMvkjer2zt/+yOSM7VpIk=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Cliente/Desktop/ESTUDOS/REACT/PROJETOS/Netflix/netflix/src/App.js"],"names":["React","useEffect","useState","Tmdb","FeatureMovie","MovieRow","MainHeader","MobileHeader","netflixLoading","FaWindowMinimize","App","movieList","setMovieList","featureData","setFeatureData","loadAll","list","getHomeList","originals","filter","i","slug","randomChosen","Math","floor","random","items","results","length","chosen","chosenInfo","getMovieInfo","id","getWindowWidth","windowWidth","setWindowWidth","window","addEventListener","innerWidth","console","log","map","item","key","title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Tmdb from \"./Tmdb.js\";\nimport FeatureMovie from \"./components/FeatureMovie.js\";\nimport MovieRow from \"./components/MovieRow.js\";\nimport MainHeader from \"./components/MainHeader\";\nimport MobileHeader from \"./components/MobileHeader\";\nimport netflixLoading from '../src/imgs/netflix-loading.gif';\nimport \"./Styles/main.css\";\nimport { FaWindowMinimize } from \"react-icons/fa\";\nexport default function App() {\n  const [movieList, setMovieList] = useState([]);\n  const [featureData, setFeatureData] = useState(null);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      // Pegando a lista Total\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      //Pegando o feature\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv')\n      setFeatureData(chosenInfo);\n    }\n\n    loadAll();\n  }, []);\n\n\n  function getWindowWidth(){\n    const [windowWidth, setWindowWidth] = useState(0);\n    useEffect(()=> {\n      function setWindowWidth(){\n        \n      }\n    })\n  }\n\n  window.addEventListener('resize', setWindowWidth(window.innerWidth))\n  console.log(windowWidth)\n  return (\n    <div className=\"page\">\n      {windowWidth < 1200 ? <MobileHeader/> : <MainHeader/>}\n      \n      {featureData &&\n        <FeatureMovie\n          item={featureData}\n        />\n      }\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow\n            key={key}\n            title={item.title}\n            items={item.items}\n          />\n        ))}\n      </section>\n      <footer className=\"footer\">\n        <p>Feito com dedicação por Fábio Signorini</p>\n        <p>Direitos de imagem para Netflix</p>\n        <p>Dados utilizados do site Themoviedb.org</p>\n      </footer>\n\n      {movieList.length <= 0 &&\n        <div className=\"loading\">\n          <img src={netflixLoading} alt=\"Carregando..\" />\n        </div>\n      }\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}